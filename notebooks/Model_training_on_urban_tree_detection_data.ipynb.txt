{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V_t6SBcsp8Lv"
      },
      "source": [
        "Training Deepforest model on data https://github.com/jonathanventura/urban-tree-detection-data.git and testing it respectively"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I_CAiCoWPIxL"
      },
      "outputs": [],
      "source": [
        "#@title Installing libraries for training and testing of data\n",
        "!pip install --upgrade deepforest albumentations pyyaml\n",
        "#pip install git+https://github.com/weecology/DeepForest.git\n",
        "!pip uninstall opencv-python-headless -y\n",
        "!pip install opencv-python-headless==4.1.2.30\n",
        "!pip install GDAL\n",
        "!pip install matplotlib\n",
        "!pip uninstall pytorch_lightning -y\n",
        "!pip install pytorch_lightning"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4s4j_4XzOquc"
      },
      "outputs": [],
      "source": [
        "#@title fetching data for training and testing\n",
        "!git clone https://github.com/jonathanventura/urban-tree-detection-data.git"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "8Om1GERXPhoR"
      },
      "outputs": [],
      "source": [
        "#@title Required libraries to import\n",
        "from pytorch_lightning.loops import dataloader\n",
        "import pandas as pd \n",
        "import torch\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import deepforest\n",
        "from deepforest import main\n",
        "import pytorch_lightning as pl\n",
        "import os\n",
        "import rasterio\n",
        "import glob"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NOsXuJ9OpO_v"
      },
      "outputs": [],
      "source": [
        "#@title Training of model on our data\n",
        "class Training:\n",
        "\n",
        "  # using deepforest model\n",
        "  model = main.deepforest()\n",
        "\n",
        "  def training_of_model(self, testing_csv, image_path):\n",
        "    os.makedirs('data',exist_ok=True)\n",
        "\n",
        "    annotationFileTemp=testing_csv\n",
        "\n",
        "    # making data feasible to train on our model\n",
        "    df = pd.read_csv(annotationFileTemp) \n",
        "    df['image_path'] = image_path\n",
        "    df['xmin']=df['x'] - 1\n",
        "    df['xmax']=df['x'] + 1\n",
        "    df['ymin']=df['y'] - 1\n",
        "    df['ymax']=df['y'] + 1\n",
        "    df['label']=\"Tree\"\n",
        "    df.to_csv(\"/content/data/annotation.csv\")\n",
        "\n",
        "    # model configuration\n",
        "    annotationFile=\"/content/data/annotation.csv\"\n",
        "\n",
        "    self.model.config[\"gpus\"] = \"-1\"\n",
        "    self.model.config[\"train\"][\"epochs\"] = 5\n",
        "    self.model.config[\"epochs\"] = 5\n",
        "    self.model.config[\"train\"][\"csv_file\"] = annotationFile\n",
        "    self.model.config[\"score_thresh\"] = 0.4\n",
        "    self.model.config[\"train\"][\"root_dir\"] = os.path.dirname(annotationFile)\n",
        "    self.model.config[\"train\"][\"fast_dev_run\"] = False\n",
        "\n",
        "    # model.create_trainer()\n",
        "    # model.use_release()\n",
        "    # model.trainer.fit(model)\n",
        "\n",
        "    # creating trainer to train the model\n",
        "    trainer= pl.Trainer( max_epochs=5,\n",
        "                gpus=\"-1\",\n",
        "                enable_checkpointing=False,\n",
        "                accelerator='gpu',\n",
        "                fast_dev_run= False)\n",
        "    \n",
        "    # training model on the respective data\n",
        "    trainer.fit(model=self.model)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B_5BHDu8pkel",
        "outputId": "bdee073e-d85d-480b-fe7f-b7fc038c8324"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "571"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#@title Total files in our data\n",
        "# Counting training files in our data\n",
        "counter=0\n",
        "for file in glob.iglob(f\"/content/urban-tree-detection-data/csv/*\"):\n",
        "  counter+=1\n",
        "counter"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Oe7gQLanguMZ"
      },
      "outputs": [],
      "source": [
        "#@title Proving data to our model\n",
        "training=Training()\n",
        "counter=0\n",
        "\n",
        "# Giving our model respective data files to train\n",
        "for file in glob.iglob(f\"/content/urban-tree-detection-data/csv/*\"):\n",
        "  if counter<100:\n",
        "    file_name=\"\"\n",
        "    try:\n",
        "      file_name=file\n",
        "      file_name=f\"/content/urban-tree-detection-data/images/{file[39:-4]}.tif\"\n",
        "      training.training_of_model(testing_csv=file, image_path=file_name)\n",
        "    except:\n",
        "        print(f\"File has some invalid data, Filename : {file}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "bfDHuLIRO6xs"
      },
      "outputs": [],
      "source": [
        "#@title Testing our model\n",
        "os.makedirs('deepforest',exist_ok=True)\n",
        "training=Training()\n",
        "names = [name.rstrip() for name in open('/content/urban-tree-detection-data/test.txt','r')]\n",
        "for name in names:  \n",
        "    image_path = os.path.join('/content/urban-tree-detection-data/images',f'{name}.tif')\n",
        "    output_path = os.path.join('deepforest',f'{name}.json')\n",
        "    with rasterio.open(image_path,'r') as src:\n",
        "        transform = src.transform   \n",
        "        crs = src.crs\n",
        "    pred = training.model.predict_image(path=image_path)\n",
        "    gdf = deepforest.utilities.annotations_to_shapefile(pred, transform, crs)\n",
        "    gdf.to_file(output_path,driver='GeoJSON')"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3.8.10 64-bit",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.10"
    },
    "vscode": {
      "interpreter": {
        "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
